// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package eth

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth(in *jlexer.Lexer, out *Price) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "student":
			out.Student = string(in.String())
		case "staff":
			out.Staff = string(in.String())
		case "extern":
			out.Extern = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth(out *jwriter.Writer, in Price) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"student\":"
		out.RawString(prefix[1:])
		out.String(string(in.Student))
	}
	{
		const prefix string = ",\"staff\":"
		out.RawString(prefix)
		out.String(string(in.Staff))
	}
	{
		const prefix string = ",\"extern\":"
		out.RawString(prefix)
		out.String(string(in.Extern))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Price) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Price) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Price) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Price) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth1(in *jlexer.Lexer, out *Origin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origin_id":
			out.OriginID = int(in.Int())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth1(out *jwriter.Writer, in Origin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"origin_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OriginID))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Origin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Origin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Origin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Origin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth1(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth2(in *jlexer.Lexer, out *Opening) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth2(out *jwriter.Writer, in Opening) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Opening) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Opening) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Opening) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Opening) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth2(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth3(in *jlexer.Lexer, out *Menu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "day":
			out.Day = string(in.String())
		case "meals":
			if in.IsNull() {
				in.Skip()
				out.Meals = nil
			} else {
				in.Delim('[')
				if out.Meals == nil {
					if !in.IsDelim(']') {
						out.Meals = make([]Meal, 0, 0)
					} else {
						out.Meals = []Meal{}
					}
				} else {
					out.Meals = (out.Meals)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Meal
					(v1).UnmarshalEasyJSON(in)
					out.Meals = append(out.Meals, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth3(out *jwriter.Writer, in Menu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"day\":"
		out.RawString(prefix)
		out.String(string(in.Day))
	}
	{
		const prefix string = ",\"meals\":"
		out.RawString(prefix)
		if in.Meals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Meals {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Menu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Menu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Menu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Menu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth3(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth4(in *jlexer.Lexer, out *MensaMenuResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "mensa":
			out.Mensa = string(in.String())
		case "daytime":
			out.Daytime = string(in.String())
		case "hours":
			(out.Hours).UnmarshalEasyJSON(in)
		case "menu":
			(out.Menu).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth4(out *jwriter.Writer, in MensaMenuResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"mensa\":"
		out.RawString(prefix)
		out.String(string(in.Mensa))
	}
	{
		const prefix string = ",\"daytime\":"
		out.RawString(prefix)
		out.String(string(in.Daytime))
	}
	{
		const prefix string = ",\"hours\":"
		out.RawString(prefix)
		(in.Hours).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"menu\":"
		out.RawString(prefix)
		(in.Menu).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MensaMenuResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MensaMenuResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MensaMenuResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MensaMenuResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth4(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth5(in *jlexer.Lexer, out *Mealtype) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mealtype_id":
			out.MealtypeID = int(in.Int())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth5(out *jwriter.Writer, in Mealtype) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mealtype_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MealtypeID))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mealtype) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mealtype) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mealtype) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mealtype) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth5(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth6(in *jlexer.Lexer, out *Mealtime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth6(out *jwriter.Writer, in Mealtime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mealtime) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mealtime) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mealtime) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mealtime) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth6(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth7(in *jlexer.Lexer, out *Meal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "mealtypes":
			if in.IsNull() {
				in.Skip()
				out.Mealtypes = nil
			} else {
				in.Delim('[')
				if out.Mealtypes == nil {
					if !in.IsDelim(']') {
						out.Mealtypes = make([]Mealtype, 0, 2)
					} else {
						out.Mealtypes = []Mealtype{}
					}
				} else {
					out.Mealtypes = (out.Mealtypes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Mealtype
					(v4).UnmarshalEasyJSON(in)
					out.Mealtypes = append(out.Mealtypes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "label":
			out.Label = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				in.Delim('[')
				if out.Description == nil {
					if !in.IsDelim(']') {
						out.Description = make([]string, 0, 4)
					} else {
						out.Description = []string{}
					}
				} else {
					out.Description = (out.Description)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Description = append(out.Description, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "position":
			out.Position = int(in.Int())
		case "prices":
			(out.Prices).UnmarshalEasyJSON(in)
		case "allergens":
			if in.IsNull() {
				in.Skip()
				out.Allergens = nil
			} else {
				in.Delim('[')
				if out.Allergens == nil {
					if !in.IsDelim(']') {
						out.Allergens = make([]Allergen, 0, 2)
					} else {
						out.Allergens = []Allergen{}
					}
				} else {
					out.Allergens = (out.Allergens)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Allergen
					(v6).UnmarshalEasyJSON(in)
					out.Allergens = append(out.Allergens, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "origins":
			if in.IsNull() {
				in.Skip()
				out.Origins = nil
			} else {
				in.Delim('[')
				if out.Origins == nil {
					if !in.IsDelim(']') {
						out.Origins = make([]Origin, 0, 2)
					} else {
						out.Origins = []Origin{}
					}
				} else {
					out.Origins = (out.Origins)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Origin
					(v7).UnmarshalEasyJSON(in)
					out.Origins = append(out.Origins, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth7(out *jwriter.Writer, in Meal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"mealtypes\":"
		out.RawString(prefix)
		if in.Mealtypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Mealtypes {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Description {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"prices\":"
		out.RawString(prefix)
		(in.Prices).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"allergens\":"
		out.RawString(prefix)
		if in.Allergens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Allergens {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"origins\":"
		out.RawString(prefix)
		if in.Origins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Origins {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth7(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth8(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "label":
			out.Label = string(in.String())
		case "label_en":
			out.LabelEn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth8(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"label_en\":"
		out.RawString(prefix)
		out.String(string(in.LabelEn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth8(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth9(in *jlexer.Lexer, out *Hours) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "opening":
			if in.IsNull() {
				in.Skip()
				out.Opening = nil
			} else {
				in.Delim('[')
				if out.Opening == nil {
					if !in.IsDelim(']') {
						out.Opening = make([]Opening, 0, 1)
					} else {
						out.Opening = []Opening{}
					}
				} else {
					out.Opening = (out.Opening)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Opening
					(v16).UnmarshalEasyJSON(in)
					out.Opening = append(out.Opening, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mealtime":
			if in.IsNull() {
				in.Skip()
				out.Mealtime = nil
			} else {
				in.Delim('[')
				if out.Mealtime == nil {
					if !in.IsDelim(']') {
						out.Mealtime = make([]Mealtime, 0, 1)
					} else {
						out.Mealtime = []Mealtime{}
					}
				} else {
					out.Mealtime = (out.Mealtime)[:0]
				}
				for !in.IsDelim(']') {
					var v17 Mealtime
					(v17).UnmarshalEasyJSON(in)
					out.Mealtime = append(out.Mealtime, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth9(out *jwriter.Writer, in Hours) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"opening\":"
		out.RawString(prefix[1:])
		if in.Opening == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Opening {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mealtime\":"
		out.RawString(prefix)
		if in.Mealtime == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Mealtime {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Hours) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Hours) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Hours) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Hours) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth9(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth10(in *jlexer.Lexer, out *Facility) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "label":
			out.Label = string(in.String())
		case "label_en":
			out.LabelEn = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "location_id":
			out.LocationID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth10(out *jwriter.Writer, in Facility) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"label_en\":"
		out.RawString(prefix)
		out.String(string(in.LabelEn))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"location_id\":"
		out.RawString(prefix)
		out.Int(int(in.LocationID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Facility) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Facility) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Facility) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Facility) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth10(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth11(in *jlexer.Lexer, out *FacilitiesListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "locations":
			if in.IsNull() {
				in.Skip()
				out.Locations = nil
			} else {
				in.Delim('[')
				if out.Locations == nil {
					if !in.IsDelim(']') {
						out.Locations = make([]Location, 0, 1)
					} else {
						out.Locations = []Location{}
					}
				} else {
					out.Locations = (out.Locations)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Location
					(v22).UnmarshalEasyJSON(in)
					out.Locations = append(out.Locations, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "facilites":
			if in.IsNull() {
				in.Skip()
				out.Facilites = nil
			} else {
				in.Delim('[')
				if out.Facilites == nil {
					if !in.IsDelim(']') {
						out.Facilites = make([]Facility, 0, 1)
					} else {
						out.Facilites = []Facility{}
					}
				} else {
					out.Facilites = (out.Facilites)[:0]
				}
				for !in.IsDelim(']') {
					var v23 Facility
					(v23).UnmarshalEasyJSON(in)
					out.Facilites = append(out.Facilites, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth11(out *jwriter.Writer, in FacilitiesListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"locations\":"
		out.RawString(prefix[1:])
		if in.Locations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Locations {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"facilites\":"
		out.RawString(prefix)
		if in.Facilites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Facilites {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FacilitiesListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FacilitiesListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FacilitiesListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FacilitiesListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth11(l, v)
}
func easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth12(in *jlexer.Lexer, out *Allergen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allergen_id":
			out.AllergenID = int(in.Int())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth12(out *jwriter.Writer, in Allergen) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allergen_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AllergenID))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Allergen) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Allergen) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComLukasmoellerchMensaCliInternalEth12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Allergen) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Allergen) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComLukasmoellerchMensaCliInternalEth12(l, v)
}
